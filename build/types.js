// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = {
    type: function(obj, type) {
      var trueType;
      trueType = this.typeOf(obj);
      if (indexOf.call(type.split('|'), trueType) >= 0) {
        return obj;
      } else {
        throw new Error("TypeError: expected " + type + ", got " + obj + " (" + trueType + ")");
      }
    },
    types: function(args, types, minArgsLength) {
      var err, error, i, ref, results, test, uniqueType;
      args = this.toArray(args);
      if (typeof types === 'string' && types.split('s...').length > 1) {
        uniqueType = types.split('s...').join('');
        types = this.duplicatesArray(uniqueType, args.length);
      }
      this.type(args, 'array');
      this.type(types, 'array');
      if (minArgsLength != null) {
        this.type(minArgsLength, 'number');
      }
      if (minArgsLength != null) {
        test = (types.length >= (ref = args.length) && ref >= minArgsLength);
      } else {
        test = args.length === types.length;
      }
      if (!test) {
        if (minArgsLength != null) {
          err = "expected between " + minArgsLength + " and " + types.length + " arguments, got " + args.length + ": " + args;
        } else {
          err = "expected " + types.length + " arguments, got " + args.length + ": " + args;
        }
        console.log(args);
        throw new Error(err);
      }
      i = 0;
      try {
        results = [];
        while (i < args.length) {
          this.type(args[i], types[i]);
          results.push(i += 1);
        }
        return results;
      } catch (error) {
        err = error;
        this.error(arguments, 'types err arguments');
        throw err;
      }
    },
    typeOf: function(obj) {
      var type;
      type = typeof obj;
      if (type === 'object') {
        if (this.isNull(obj)) {
          return 'null';
        }
        if (this.isArray(obj)) {
          return 'array';
        }
      }
      if (type === 'number') {
        if (this.isNaN(obj)) {
          return 'NaN';
        }
      }
      return type;
    },
    areStrings: function(array) {
      return this.all(array, this.isString);
    },
    typeString: function(str) {
      return this.type(str, 'string');
    },
    typeArray: function(array) {
      return this.type(array, 'array');
    },
    forceArray: function(keys) {
      if (keys == null) {
        return [];
      }
      if (!this.isArray(keys)) {
        return [keys];
      } else {
        return keys;
      }
    },
    forceObject: function(key, value) {
      var obj;
      if (!this.isObject(key)) {
        obj = {};
        obj[key] = value;
        return obj;
      } else {
        return key;
      }
    }
  };

}).call(this);
